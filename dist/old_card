import {
    LitElement,
    html,
    css,
} from "https://unpkg.com/lit-element@2.0.1/lit-element.js?module";

// Function to fetch and parse the CSV data
async function fetchRandomQuote() {

    // URL of the public Google Sheet in CSV format
    const csvUrl = 'https://docs.google.com/spreadsheets/d/1mySc-NNs1vKgU4_g4fSDk7BY46W0qqev7aiR_UHSmrU/export?format=csv';

    try {
        // Fetch the CSV data
        const response = await fetch(csvUrl);
        const csvText = await response.text();

        // Split the CSV into rows
        const rows = csvText.split('\n').slice(1); // Skip the header row

        // Filter out any empty rows
        const validRows = rows.filter(row => row.trim() !== '');

        // Select a random row
        const randomRow = validRows[Math.floor(Math.random() * validRows.length)];

        // Split the row into columns
        const columns = randomRow.split(',');

        // Extract the "Person" and "Quote" (assuming they are in the 2nd and 3rd columns)
        const person = columns[1]?.trim();
        const quote = columns[2]?.trim();

        // Log the result
        if (person && quote) {
            // Return the values as an object
            return { person, quote };
        } else {
            console.log('Invalid data format.');
        }
    } catch (error) {
        console.error('Error fetching or parsing CSV:', error);
    }
}

class ContentCardExample extends HTMLElement {
    // Whenever the state changes, a new `hass` object is set. Use this to
    // update your content.
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
    }
    set hass(hass) {
        // Initialize the content if it's not there yet.
        if (!this.content) {
            this.innerHTML = `
        <ha-card header="Loading quote of the day...">
          <div class="card-content"></div>
        </ha-card>`;

        this.content = this.querySelector("div");
        this.card = this.querySelector("ha-card");
        fetchRandomQuote().then( result => {
            console.log(result.person);
            this.content.innerHTML = `${result.person}`;
            this.card.header = `${result.quote}`;
        }).catch(error => {
            // Handle any errors here
            console.error(error);
        });
        }
    }

    // The user supplied configuration. Throw an exception and Home Assistant
    // will render an error card.
    setConfig(config) {
        this.config = config;
    }

    // The height of your card. Home Assistant uses this to automatically
    // distribute all cards over the available columns in masonry view
    getCardSize() {
        return 3;
    }

    // The rules for sizing your card in the grid in sections view
    public getGridOptions() {
        return {
            rows: 12,
            columns: 12,
            min_rows: 3,
            max_rows: 3,
        };
    }

    static get styles() {
        return css`
          :host {
            background-color: #fafafa;
            padding: 16px;
            display: block;
          }
          wired-card {
            background-color: white;
            padding: 16px;
            display: block;
            font-size: 18px;
            max-width: 600px;
            margin: 0 auto;
          }
        `;
    }
}

customElements.define("homie-card", ContentCardExample);